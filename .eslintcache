[{"/Users/fakhan/-myfitnesstracker/src/components/App.js":"1","/Users/fakhan/-myfitnesstracker/src/components/Login.js":"2","/Users/fakhan/-myfitnesstracker/src/components/Routines.js":"3","/Users/fakhan/-myfitnesstracker/src/components/RoutineForm.js":"4","/Users/fakhan/-myfitnesstracker/src/components/MyRoutines.js":"5","/Users/fakhan/-myfitnesstracker/src/components/Activities.js":"6"},{"size":4398,"mtime":1606785976894,"results":"7","hashOfConfig":"8"},{"size":2694,"mtime":1606784963826,"results":"9","hashOfConfig":"8"},{"size":2293,"mtime":1606785508525,"results":"10","hashOfConfig":"8"},{"size":1842,"mtime":1606785898227,"results":"11","hashOfConfig":"8"},{"size":6786,"mtime":1606786028226,"results":"12","hashOfConfig":"8"},{"size":2792,"mtime":1606786101442,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"b5pq3f",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/fakhan/-myfitnesstracker/src/components/App.js",["28","29","30","31"],"import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Header from './Header'\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport Login from './Login'\nimport { getToken, clearToken } from '../api/index'\nimport { hitAPI } from '../api/index'\nimport Activities from './Activities'\nimport Routines from './Routines'\nimport MyRoutines from './MyRoutines'\nimport RoutineForm from './RoutineForm'\nimport Home from './Home'\nimport NewActivity from './NewActivity'\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(!!getToken())\n  const [activitiesList, setActivitiesList] = useState([])\n  const [routineList, setRoutineList] = useState([])\n  const [username, setUsername] = useState('')\n  const [user, setUser] = useState({})\n  const [editRoutine, setEditRoutine] = useState({})\n  console.log('routine s', routineList)\n\n  const [editRoutineAct, setEditRoutineAct] = useState({})\n  const [showRoutForm, setShowRoutForm] = useState(false)\n\n  function updateActivity(updatedAct) {\n    let index = activitiesList.findIndex((activity) => {\n      return activity.id === updatedAct.id\n    })\n    if (index > -1) {\n      let activityList = [...activitiesList]\n      activityList[index] = updatedAct\n      setActivitiesList(activityList)\n    }\n  }\n\n  function updateRoutine(updatedRoutine) {\n    let index = routineList.findIndex((routine) => {\n      return routine.id === updatedRoutine.id\n    })\n    if (index > -1) {\n      let newList = [...routineList]\n      newList[index] = updatedRoutine\n      setRoutineList(newList)\n    }\n  }\n\n  const addActivity = (newActivity) => {\n    return setActivitiesList([newActivity, ...activitiesList])\n  }\n\n  const addNewRoutine = (newRoutine) => {\n    return setRoutineList([newRoutine, ...routineList])\n  }\n\n  useEffect(() => {\n    hitAPI('GET', '/activities')\n      .then((data) => {\n        console.log(data)\n        setActivitiesList(data)\n      })\n      .catch(console.error)\n  }, [isLoggedIn])\n\n  useEffect(() => {\n    hitAPI('GET', '/routines')\n      .then((data) => {\n        console.log(data)\n        setRoutineList(data)\n      })\n      .catch(console.error)\n  }, [isLoggedIn])\n\n  useEffect(() => {\n    async function fetchData() {\n      const resp = await hitAPI('GET', '/users/me')\n      const username = resp.username\n\n      const user = resp.id\n      setUser(user)\n      setUsername(username)\n    }\n    fetchData()\n  }, [isLoggedIn])\n\n  function userRoutines() {\n    return routineList.filter((routine) => {\n      return routine.creatorId === user\n    })\n  }\n  return (\n    <Router>\n      <div className=\"app\">\n        <Header\n          isLoggedIn={isLoggedIn}\n          setIsLoggedIn={setIsLoggedIn}\n          clearToken={clearToken}\n          username={username}\n        />\n        <Switch>\n          <Route path=\"/login\">\n            <Login setIsLoggedIn={setIsLoggedIn} setUser={setUser} />\n          </Route>\n          <Route path=\"/activities\">\n            <Activities\n              isLoggedIn={isLoggedIn}\n              activitiesList={activitiesList}\n              setActivitiesList={setActivitiesList}\n              addActivity={addActivity}\n              updateActivity={updateActivity}\n              routineList={routineList}\n            />\n          </Route>\n          <Route path=\"/myroutines\">\n            {showRoutForm ? (\n              <RoutineForm\n                addNewRoutine={addNewRoutine}\n                {...editRoutine}\n                updateRoutine={updateRoutine}\n                setEditRoutine={setEditRoutine}\n              />\n            ) : (\n              <button onClick={() => {}}>Create Routine</button>\n            )}\n\n            <MyRoutines\n              routineList={routineList}\n              setRoutineList={setRoutineList}\n              isLoggedIn={isLoggedIn}\n              setEditRoutine={setEditRoutine}\n              user={user}\n              setEditRoutineAct={setEditRoutineAct}\n              editRoutineAct={editRoutineAct}\n            />\n          </Route>{' '}\n          :\n          <Route path=\"/routines\">\n            <Routines\n              routineList={routineList}\n              setEditRoutineAct={setEditRoutineAct}\n              editRoutineAct={editRoutineAct}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","/Users/fakhan/-myfitnesstracker/src/components/Login.js",[],"/Users/fakhan/-myfitnesstracker/src/components/Routines.js",[],"/Users/fakhan/-myfitnesstracker/src/components/RoutineForm.js",["32"],"/Users/fakhan/-myfitnesstracker/src/components/MyRoutines.js",["33"],"import React, { useState, useEffect } from 'react'\nimport { hitAPI } from '../api'\nimport RoutineActivities from './RoutineActvities'\nimport './MyRoutines.css'\n\nconst ActivityForm = (props) => {\n  const { handleClick, id } = props\n  const [activityId, setActivityId] = useState('')\n  const [count, setCount] = useState('')\n  const [duration, setDuration] = useState('')\n\n  useEffect(() => {\n    setActivityId(props.routineActivityId || '')\n    setCount(props.count || '')\n    setDuration(props.duration || '')\n  }, [id])\n\n  function clearForm() {\n    setActivityId('')\n    setCount('')\n    setDuration('')\n  }\n\n  return (\n    <form onSubmit={(event) => event.preventDefault()}>\n      <input\n        type=\"number\"\n        value={activityId}\n        onChange={(event) => setActivityId(event.target.value)}\n        placeholder=\"Id\"\n      />\n      <input\n        type=\"number\"\n        value={count}\n        onChange={(event) => setCount(event.target.value)}\n        placeholder=\"Count\"\n      />\n      <input\n        type=\"number\"\n        value={duration}\n        onChange={(event) => setDuration(event.target.value)}\n        placeholder=\"Duration\"\n      />\n      <button\n        onClick={async () => {\n          handleClick(activityId, count, duration)\n          clearForm()\n        }}\n      >\n        {id ? 'Edit Activity' : 'Add Activity'}\n      </button>\n    </form>\n  )\n}\n\nconst MyRoutines = (props) => {\n  const {\n    routineList,\n    setRoutineList,\n    setEditRoutine,\n    showActivities,\n    setShowActivities,\n    setEditRoutineAct,\n    editRoutineAct,\n    user,\n  } = props\n\n  const newarrayActivities = () => {\n    let newarr = []\n    for (let i = 0; i < routineList.length; i++) {\n      for (let j = 0; j < routineList[i].activities.length; j++) {\n        newarr.push(routineList[i].activities[j])\n      }\n    }\n    console.log(newarr)\n    return newarr\n  }\n  newarrayActivities()\n\n  return (\n    <>\n      <div className=\"myroutine-list\">\n        <h1>My Routines</h1>\n        {routineList.map((routine) => {\n          return user === routine.creatorId ? (\n            <div className=\"routine\" key={routine.id}>\n              <h1>\n                {routine.name} by {routine.creatorName}\n              </h1>\n              <h2>{routine.goal}</h2>\n              <div className=\"options\">\n                <button\n                  onClick={() => {\n                    try {\n                      hitAPI('DELETE', `/routines/${routine.id}`)\n                      setRoutineList(\n                        routineList.filter((deleted) => {\n                          return routine !== deleted\n                        }),\n                      )\n                    } catch (error) {\n                      console.log(error)\n                    }\n                  }}\n                >\n                  DELETE\n                </button>\n                <button\n                  onClick={() => {\n                    setEditRoutine(routine)\n                  }}\n                >\n                  EDIT\n                </button>\n              </div>\n              <ActivityForm\n                routine={routine}\n                {...editRoutineAct}\n                handleClick={async (activityId, count, duration) => {\n                  const payload = {\n                    activityId,\n                    count,\n                    duration,\n                  }\n\n                  const editpayload = {\n                    count,\n                    duration,\n                  }\n                  if (editRoutineAct) {\n                    try {\n                      const editedAct = await hitAPI(\n                        'PATCH',\n                        `/routine_activities/${activityId}`,\n                        editpayload,\n                      )\n                      let index = routineList.findIndex((rout) => {\n                        return rout.id === routine.id\n                      })\n                      if (index > -1) {\n                        const newList = [...routineList]\n                        newList[index] = routine\n                        let actIndex = routine.activities.findIndex(\n                          (activity) => {\n                            return activity.routineActivityId === editedAct.id\n                          },\n                        )\n                        if (actIndex > -1) {\n                          newList[index].activities[actIndex].count =\n                            editedAct.count\n                          newList[index].activities[actIndex].duration =\n                            editedAct.duration\n                          setRoutineList(newList)\n                        }\n                      }\n                      setEditRoutineAct({})\n                    } catch (error) {\n                      console.log(error)\n                    }\n                  } else {\n                    try {\n                      await hitAPI(\n                        'POST',\n                        `/routines/${routine.id}/activities`,\n                        payload,\n                      )\n                        .then((resp) => {\n                          const newList = [...routineList]\n                          let idx = newList.indexOf(routine)\n                          newList[idx].activities.push(resp)\n                          setRoutineList(newList)\n                        })\n                        .catch(console.error)\n                    } catch (error) {\n                      console.log(error)\n                    }\n                  }\n                }}\n              />\n              <RoutineActivities\n                activityList={routine.activities}\n                showActivities={showActivities}\n                setShowActivities={setShowActivities}\n                myRoutines={true}\n                setEditRoutineAct={setEditRoutineAct}\n                handleDelete={async (activity) => {\n                  try {\n                    await hitAPI(\n                      'DELETE',\n                      `/routine_activities/${activity.routineActivityId}`,\n                    )\n                      .then((resp) => {\n                        const newList = [...routineList]\n                        let idx = newList.indexOf(routine)\n                        let activityIdx = newList[idx].activities.indexOf(\n                          activity,\n                        )\n                        newList[idx].activities.splice(activityIdx, 1)\n                        setRoutineList(newList)\n                      })\n                      .catch(console.error)\n                  } catch (error) {\n                    console.log(error)\n                  }\n                }}\n              />\n            </div>\n          ) : null\n        })}\n      </div>\n    </>\n  )\n}\n\nexport default MyRoutines\n","/Users/fakhan/-myfitnesstracker/src/components/Activities.js",["34","35","36"],{"ruleId":"37","severity":1,"message":"38","line":4,"column":50,"nodeType":"39","messageId":"40","endLine":4,"endColumn":54},{"ruleId":"37","severity":1,"message":"41","line":13,"column":8,"nodeType":"39","messageId":"40","endLine":13,"endColumn":19},{"ruleId":"37","severity":1,"message":"42","line":25,"column":24,"nodeType":"39","messageId":"40","endLine":25,"endColumn":39},{"ruleId":"37","severity":1,"message":"43","line":87,"column":12,"nodeType":"39","messageId":"40","endLine":87,"endColumn":24},{"ruleId":"44","severity":1,"message":"45","line":12,"column":6,"nodeType":"46","endLine":12,"endColumn":10,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":16,"column":6,"nodeType":"46","endLine":16,"endColumn":10,"suggestions":"49"},{"ruleId":"37","severity":1,"message":"50","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":35},{"ruleId":"37","severity":1,"message":"51","line":11,"column":5,"nodeType":"39","messageId":"40","endLine":11,"endColumn":18},{"ruleId":"37","severity":1,"message":"52","line":21,"column":9,"nodeType":"39","messageId":"40","endLine":21,"endColumn":15},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'NewActivity' is defined but never used.","'setShowRoutForm' is assigned a value but never used.","'userRoutines' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.goal' and 'props.name'. Either include them or remove the dependency array. If 'setGoal' needs the current value of 'props.goal', you can also switch to useReducer instead of useState and read 'props.goal' in the reducer.","ArrayExpression",["53"],"React Hook useEffect has missing dependencies: 'props.count', 'props.duration', and 'props.routineActivityId'. Either include them or remove the dependency array. If 'setActivityId' needs the current value of 'props.routineActivityId', you can also switch to useReducer instead of useState and read 'props.routineActivityId' in the reducer.",["54"],"'Fragment' is defined but never used.","'setActivities' is assigned a value but never used.","'styles' is assigned a value but never used.",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [id, props.goal, props.name]",{"range":"59","text":"60"},"Update the dependencies array to be: [id, props.count, props.duration, props.routineActivityId]",{"range":"61","text":"62"},[350,354],"[id, props.goal, props.name]",[515,519],"[id, props.count, props.duration, props.routineActivityId]"]